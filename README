<GAME NAME> README
Cornerstone

CONTRIBUTORS
Akshay Srivatsan asrivat1@jhu.edu
Andrew Zhu azhu8@jhu.edu
Grady Xiao gxiao2@jhu.edu
Pratyush Trivedi ptrived8@jhu.edu


To compile and run, type the following:
cd src/
make
./gameManager

Assignment 6 Task Writeups

General Notes:
- As of now, there is only one working level.
  Level two is in here in preparation for next week.

Akshay
- Added physics component
- Separated physics from Input Components
- Made physics decay based on time

Andrew
- reorganized texture pools so that copies of entities can share textures
- added detection of entities hitting walls/ground -> will reduce (doesn't yet!)
    number of collisions and allows things like wall jumps and sliding on
    walls to work
- implemented wall slides and wall jumps, but somewhat buggy (see quirks below)
- performance updates to PhysicsHandler and PhysicsComponent
- segfault bug fixes with PhysicsComponent, HealthComponent
- minor bug fixes with CollisionHandler

Grady
- Modified level editor to collapse all neighboring horizontal terrain tiles into a single entity.
  This decreases amount of collisions that need to be checked
- Added ability to wrap a level to go on forever until a hero dies or get to the victory zone
  Note: The hero is copied over only if it was originally on the last camera section.
- Added ability to proceed to the next level, allowing the addition of multiple levels
- Modified damage control so that it's based on time
- Added border control for hero and damage for hero if colliding with border
- Added level preview to the beginning of game play. Press p to skip preview.

Pratyush
-Added projectiles to the game
-Added commands to spawn and despawn entities mid-game. This was necessary to allow projectiles to
spawn and despawn and allow enemies to be killed.
-Drew spritesheets for attacking, taking damage, jumping, and wall sliding for player and enemy
-Updated animation component to play animations at the right time using an actionState enum
-Fixed a seg fault when an entity is deleted while colliding with multiple other objects
-Added a second hero for multiplayer and adjusted the results screen to reflect multiplayer results



CONTROLS
- Press ESC to quit game
- Press q to return to MENU
- Press p to skip preview

Player 1
- Up/down/left/right to move player 1
- Jump(up) can perform double jump in air, or infinite wall jumps (must be next to terrain)
- Press M to throw projectiles (there's knock back present)

Player 2
- WASD to move player 2
- Jump (W) can perform double jump in air, or infinite wall jumps (must be next to terrain)
- Press V to throw projectiles (there's knock back present)

CAMERA
- Allows for preview of levels and scrolling of levels
- Camera moves with at a constant speed from left to right during gameplay
  Incurs damage on heroes if collision happens.

TERRAIN
- static object with art and collision ability
- collisions with moving entities are calculated -> with corner cases considered

LEVEL EDITOR
- the game reads in a text file to determine the layout of the level
- all players, enemies, terrain, victory zones are placed this way. See
    EntityManager's populateLevel() method.

SCREENS
StartScreen
- Currently has our game production logo that fades in from black
- Also has our hero just walking to show progress and as something related
    to the game
- Switches to the menu screen in 10 secs

MenuScreen
- Has the options for play, adjust brightness, adjust volume, highscore, and
    quit
- The texts fade in from black and is centered horizontally
- Use SPACE to select options (currently SPACE is disabled for adjust
    brightness and adjust volume)

PlayScreen
- Has the game play
- Pressing Q will bring you back to the main menu.

HighscoreScreen
- Shows the highscore (fade in from black)
- Proceeds to the menu screen after 5 secs
- Pressing Q will bring you back to the main menu.

Press ESC at any time to quit the game. You can also select QUIT from the main
    menu.

ANIMATION
The hero and the enemy each have an AnimationComponent that will update
their sprites. If the character is moving at a velocity of more than 0.01,
we cycle through a four frame walking animation in the direction they are
facing. These frames are stored in the top row of the spritesheet. If the
character is not moving, we cycle through a two frame idle animation which is
in the second row of the spritesheet. If the character is taking damage, a
two frame animation is flashed twice. If the character is throwing a
projectile, a four frame animation is played. If the character is jumping, a
four frame animation is played. If the character is sliding down a wall, a
four frame animation is cycled.


CLASS STRUCTURE

Entity
    This is a skeleton for any object that appears on the screen. To add
    functionality, various Components are attached to an Entity. The
    EntityBuilder is responsible for creating and destroying entities.

Handlers (aka. Systems)
    These objects handle entities, performing various functions depending on
    the entity's components. For example, the LocationHandler will look at
    each entity's current LocationComponent and PhysicsComponent to calculate
    where the entity should move to. Once these calculations are made, the
    Handler will update that Entity's LocationComponent and PhysicsComponent.
    Handlers can emit commands if they want another Handler to do something
    for them. ControlHandler is new, and handles changing states.

Components
    These define certain types of behavior for an entity. Their fields are used
    to determine how handlers interact with them. Some components can run
    complex functions to tell their handlers exactly what to do with them.
    The original components are now going to serve as base classes, so each
    type of component implements the same methods with inheritance.

Commands
    These are used to by Handlers to communicate with each other. Each handler
    handles a different set of commands.

GameManager
    The game manager maintains the game loop, all entities, and all commands.
    It is also responsible for startup and shutdown of the game.

GAMEPLAY

You are now a dude in a blue shirt. Maybe a TA? You are trying to dodge the
LAX bros who wander in a more sophisticated manner than last time. They now
independently pick a X and Y direction, so they can move diagonally. Your player
is also more sophisticated: you can accelerate in any direction. Hitting a wall
will reset your corresponding velocity direction. There is also some friction
so you will come to a stop if you stop inputting.

The enemy will move towards the hero if the hero is within a certain range.
Else, the enemy moves randomly and freely on its own.

If your hero gets hit, an alarm noise will play.

SCORE
The score increments with time of survival and decrements with each collision
with enemy. In order to get the highest score, you want to try to survive as
long as possible while avoiding the enemy, and then go to the victory zone
when you absolutely can't hold on.

QUIRKS
- no game name yet!
- idle state sometimes changes directions
- projectile collision with side of terrain was iffy when projectiles didn't
    disappear?
- wall jumps and wall slides work better when colliding on right side of wall.
    Being onLeftWall gets reset for some reason...
- disabled the down key due to bugs that allow you to sink into the terrain

TODOS
verify deletion was implemented properly w/ vectors!
Move handlers to namespaces?
revamp terrain -> fewer rectangles!
change collision to only check static objects in certain bins?
EntityEnum instead of dynamic casts everywhere? (see camera.cpp, etc.)
Fix input lag on wasd player
Change allocation to happen in groups
Change renderCopy() of static stuff to be more efficient: group static textures
